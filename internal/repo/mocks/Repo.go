// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	context "context"

	repo "github.com/crestenstclair/crud/internal/repo"
	mock "github.com/stretchr/testify/mock"
)

// Repo is an autogenerated mock type for the Repo type
type Repo struct {
	mock.Mock
}

// CreateUser provides a mock function with given fields: ctx, user
func (_m *Repo) CreateUser(ctx context.Context, user repo.User) (repo.User, error) {
	ret := _m.Called(ctx, user)

	var r0 repo.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.User) (repo.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.User) repo.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, userID
func (_m *Repo) DeleteUser(ctx context.Context, userID string) (repo.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 repo.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repo.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repo.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, userID
func (_m *Repo) GetUser(ctx context.Context, userID string) (repo.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 repo.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (repo.User, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) repo.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, user
func (_m *Repo) UpdateUser(ctx context.Context, user repo.User) (repo.User, error) {
	ret := _m.Called(ctx, user)

	var r0 repo.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repo.User) (repo.User, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repo.User) repo.User); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(repo.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, repo.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepo creates a new instance of Repo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repo {
	mock := &Repo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
